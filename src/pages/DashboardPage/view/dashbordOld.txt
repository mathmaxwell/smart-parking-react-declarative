import { FetchView, One } from 'react-declarative'
import { getAllParkingSessions, getCarsByFilter } from '../../api/carsSessions'
import { useState } from 'react'
import { formatDate, toDate } from '../CarsSessions/view/function'
import { filters } from './view/DashboardFields'
import { Box, Card } from '@mui/material'
import { calculateDashboard } from './function/calculateDashboard'
import DashboardCard from './DashboardCards'
import PeopleIcon from '@mui/icons-material/People'
import DirectionsBusIcon from '@mui/icons-material/DirectionsBus'
import WorkIcon from '@mui/icons-material/Work'
import BusinessIcon from '@mui/icons-material/Business'
import DashboardChard from './charts/SumChart'
import { calculateForFreeMonth } from './function/calculateForFreeMonth'
import DashboardPie from './charts/DashboardPie'
import DashboardPieTime from './charts/DashboardPieTime'
import { HeartbeatChart } from './charts/HeartbeatChart'

const DashboardPage = () => {
	const [filterData, setFilterData] = useState({
		startDate: new Date().toLocaleDateString('en-GB'),
		startTime: '00:00',
		endDate: new Date().toLocaleDateString('en-GB'),
		endTime: '23:59',
	})

	return (
		<>
			<One
				fields={filters}
				data={filterData}
				onChange={setFilterData}
				onClick={e => {
					if (e !== 'week' && e !== 'today' && e !== 'month' && e !== 'year') {
						return
					}
					const now = new Date()
					let start = new Date(now)
					let end = new Date(now)
					if (e === 'today') {
						start.setHours(0, 0, 0, 0)
						end.setHours(23, 59, 59, 999)
					} else if (e === 'week') {
						start.setDate(now.getDate() - 7)
						start.setHours(0, 0, 0, 0)
						end.setHours(23, 59, 59, 999)
					} else if (e === 'month') {
						start.setMonth(now.getMonth() - 1)
						start.setHours(0, 0, 0, 0)
						end.setHours(23, 59, 59, 999)
					} else if (e === 'year') {
						start.setFullYear(now.getFullYear() - 1)
						start.setHours(0, 0, 0, 0)
						end.setHours(23, 59, 59, 999)
					}
					setFilterData({
						startDate: formatDate(start),
						startTime: '00:00',
						endDate: formatDate(end),
						endTime: '23:59',
					})
				}}
			/>
			<FetchView
				payload={filterData}
				state={async () => {
					const response = await getAllParkingSessions(
						toDate(filterData.startDate, filterData.startTime),
						toDate(filterData.endDate, filterData.endTime)
					)
					return response
				}}
			>
				{async dashboard => {
					const result = await calculateDashboard(dashboard)
					const mounthFree = await getCarsByFilter(
						toDate(filterData.startDate, filterData.startTime),
						toDate(filterData.endDate, filterData.endTime)
					)

					const resultMounthFree = await calculateForFreeMonth(mounthFree)

					return (
						<Box
							sx={{
								display: 'flex',
								alignItems: 'center',
								justifyContent: 'center',
								flexDirection: 'column',
								gap: 2,
							}}
						>
							<Box
								sx={{
									display: 'grid',
									gridTemplateColumns: {
										xs: '1fr',
										sm: '1fr',
										md: '1fr 1fr',
										lg: 'repeat(4, 1fr)',
									},
									mt: 2,
									gap: 2,
								}}
							>
								<DashboardCard
									// title='Пассажиры (провожающие/встречающие)'
									title='Пассажиры'
									icon={<PeopleIcon />}
									value={result.other.sum}
									secondaryValue={result.other.count}
									subtitle='за час по 25.000 сум'
								/>
								<DashboardCard
									// title='Туристические автобусы/микроавтобусы/минивэны'
									title='Туристические автобусы'
									icon={<DirectionsBusIcon />}
									value={result.bus.sum}
									secondaryValue={result.bus.count}
									subtitle='первые 2 часа 25.000, потом 25.000 за час'
								/>
								<DashboardCard
									// title='Сотрудники (абонемент)'
									title='Сотрудники'
									icon={<WorkIcon />}
									value={result.worker.sum + resultMounthFree.worker.sum}
									secondaryValue={result.worker.count}
									mounthCount={resultMounthFree.worker.count}
									subtitle='за месяц 100.000 сум'
								/>
								<DashboardCard
									// title='Арендаторы и прочие организации'
									title='Арендаторы'
									icon={<BusinessIcon />}
									mounthCount={resultMounthFree.tenant.count}
									value={result.tenant.sum + resultMounthFree.tenant.sum}
									secondaryValue={result.tenant.count}
									subtitle='за месяц 300.000 сум'
								/>
							</Box>
							<Box
								sx={{
									display: 'grid',
									gridTemplateColumns: {
										xs: '1fr',
										sm: '1fr',
										md: '1fr',
										lg: 'repeat(2, 1fr)',
									},
									mt: 2,
									gap: 2,
									width: '100%',
								}}
							>
								<Card sx={{ width: '100%', height: '450px' }}>
									<DashboardChard
										result={result}
										resultMounthFree={resultMounthFree}
									/>
								</Card>
								<Card sx={{ width: '100%', height: '450px' }}>
									<DashboardPie resultMounthFree={resultMounthFree} />
								</Card>
								<Card sx={{ width: '100%', height: '450px' }}>
									<DashboardPieTime result={result} />
								</Card>
								<Card sx={{ width: '100%', height: '450px' }}>
									<HeartbeatChart arrivalsByHour={result.arrivalsByHour} />
								</Card>
							</Box>
						</Box>

					)
				}}
			</FetchView>
		</>
	)
}

export default DashboardPage
